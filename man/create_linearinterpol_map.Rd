% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/map_linearinterpol.R
\name{create_linearinterpol_map}
\alias{create_linearinterpol_map}
\title{Create a linear interpolation mapping}
\usage{
create_linearinterpol_map()
}
\value{
Returns a list of functions to operate with the mapping, see \code{\link{create_maptype_map}}.
}
\description{
Creates a map to linearly interpolate the values at the source indices
given on a one-dimensional mesh to the one-dimensional mesh associated with
the variables at the target indices.
}
\details{
The following fields are required in the parameter list to initialize the mapping:
\tabular{ll}{
\code{mapname} \tab Name of the mapping \cr
\code{maptype} \tab Must be \code{"linearinterpol_map"} \cr
\code{src_idx} \tab Vector of source indices \cr
\code{tar_idx} \tab Vector of target indices \cr
\code{src_x} \tab Vector with the mesh associated with the source indices \cr
\code{tar_x} \tab Vector with the mesh associated with the target indices \cr
\code{zero_outside} \tab Default is \code{FALSE}. If TRUE, y-values of target x-values outside
                         the limits of the source mesh will be zero, otherwise this situation
                         is not allowed.
}
}
\examples{
params <- list(
  mapname = "mylinearintmap",
  maptype = "linearinterpol_map",
  src_idx = 1:3,
  tar_idx = 4:6,
  src_x = c(1,5,10),
  tar_x = c(4,5,6)
)
mymap <- create_linearinterpol_map()
mymap$setup(params)
x <- c(1,2,3,0,0,0)
mymap$propagate(x)
mymap$jacobian(x)

}
\seealso{
Other mappings: 
\code{\link{create_compound_map}()},
\code{\link{create_convolution_with_xtrafo_map}()},
\code{\link{create_derivative2nd_map}()},
\code{\link{create_derivative_map}()},
\code{\link{create_linearinterpol_with_xtrafo_map}()},
\code{\link{create_linearmap_map}()},
\code{\link{create_maptype_map}()},
\code{\link{create_map}()},
\code{\link{create_nonlinear_map}()},
\code{\link{create_normerr_map}()},
\code{\link{create_product_map}()}
}
\concept{mappings}
